import sys, pygame
import time
import random

Framepersecond = 20 #frames per second
boardsize = 700 #height and width of the board
cornersize = 2*(boardsize/11) #height and width of corner board pieces
edgewidth = (boardsize/11) #width of non-corner board pieces
edgeheight = 2*(boardsize/11) #height of non-corner board pieces
BLACK      = (  0,   0,   0) 
WHITE      = (200, 200, 200)
BRIGHT_WHITE = (255, 255, 255)
GREEN      = (  0, 155,   0)
TEXTCOLOR = WHITE
BGCOLOR = BLACK

dice1 = pygame.image.load('./images/1.png')
dice2 = pygame.image.load('./images/2.png')
dice3 = pygame.image.load('./images/3.png')
dice4 = pygame.image.load('./images/4.png')
dice5 = pygame.image.load('./images/5.png')
dice6 = pygame.image.load('./images/6.png')

#player1 = Player(0,0,0)
#print player1.money

def return_button(msg, x, y, w, h, ic, ac): #return button, takes a string, top left coordinates, width, height, inactive color, active color
    mouse = pygame.mouse.get_pos() #track mouse position
    click = pygame.mouse.get_pressed() #check for mouse 1 click
    
    if x + w > mouse[0] > x and y + h > mouse[1] > y: #if mouse is in the bounds of button
        pygame.draw.rect(DISPLAY, ac, (x, y, w, h)) #light up box (indicate interactivity)
        if click[0] == 1: #if click mouse 1
            main() #back to roll screen
    else:
        pygame.draw.rect(DISPLAY, ic, (x, y, w, h)) #if mouse not hovering just display (darker) box
    #box and text within box    
    smallText = pygame.font.Font("freesansbold.ttf", 20) 
    textSurf, textRect = text_objects(msg, smallText, BLACK)
    textRect.center = ((x + (w/2)), (y + (h/2)))
    DISPLAY.blit(textSurf, textRect)

def text_objects(text, font, color):
    textSurface = font.render(text, True, color) #Create surface
    return textSurface, textSurface.get_rect()
    
    
def dice_display(d1, d2): #dice display screen, takes the dice.png generated by dice_roll && dice_roll2
    while True:
        for event in pygame.event.get(): #check for hitting exit
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
        
        DISPLAY.fill(BLACK)
        
        #display the dice images generated
        DISPLAY.blit(d1, (170, 440)) 
        DISPLAY.blit(d2, (370, 440))

        
        #button to return to roll screen
        return_button("Return", 300, 100, 100, 75, WHITE, BRIGHT_WHITE)

        
        pygame.display.update()
        fpsClock.tick(Framepersecond) #limits how fast the screen can update by framepersecond



def dice_button(msg, x, y, w, h, ic, ac): #roll button, takes a string, top left coordinates, width, height, inactive color, active color
    mouse = pygame.mouse.get_pos() #mouse position
    click = pygame.mouse.get_pressed() #checks for mouse 1 click
    
    if x + w > mouse[0] > x and y + h > mouse[1] > y:
        pygame.draw.rect(DISPLAY, ac, (x, y, w, h))
        if click[0] == 1:
            dice_roll() #click button, send to dice_roll()
    else:
        pygame.draw.rect(DISPLAY, ic, (x, y, w, h))
    smallText = pygame.font.Font("freesansbold.ttf", 20)
    textSurf, textRect = text_objects(msg, smallText, BLACK)
    textRect.center = ((x + (w/2)), (y + (h/2)))
    DISPLAY.blit(textSurf, textRect)


def dice_roll():
    die1 = random.randrange(1, 7) #rng for dice
    
    #match generated number with image
    while True:
        if die1 == 1:
            dice_roll2(dice1)
        elif die1 == 2:
            dice_roll2(dice2)
        elif die1 == 3:
            dice_roll2(dice3)
        elif die1 == 4:
            dice_roll2(dice4)
        elif die1 == 5:
            dice_roll2(dice5)
        elif die1 == 6:
            dice_roll2(dice6)
    
def dice_roll2(d):
    die2 = random.randrange(1, 7)
    
    #generate 2nd die
    while True:
        if die2 == 1:
            dice_display(d, dice1)
        elif die2 == 2:
            dice_display(d, dice2)
        elif die2 == 3:
            dice_display(d, dice3)
        elif die2 == 4:
            dice_display(d, dice4)
        elif die2 == 5:
            dice_display(d, dice5)
        elif die2 == 6:
            dice_display(d, dice6)
        
        

def main():
    global DISPLAY, GAMEFONT, fpsClock
    pygame.init() #initializes the board
    fpsClock = pygame.time.Clock() #keeps track of how fast the screen is updating
    GAMEFONT = pygame.font.Font('freesansbold.ttf', 32)
    DISPLAY = pygame.display.set_mode((boardsize, boardsize))
    pygame.display.set_caption('DICE') 
    #boardImage = pygame.image.load('monopoly.png')
    #boardgamebg = pygame.image.load('monopoly.png')
    
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
        
        DISPLAY.fill(BLACK)
        
        
        dice_button("Roll", 300, 300, 100, 100, WHITE, BRIGHT_WHITE) #creates roll button
        
        
        

        
        pygame.display.update()
        fpsClock.tick(Framepersecond) #limits how fast the screen can updat by framepersecond
    
main()
